
Posuv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002440  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800254c  0800254c  0000354c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002570  08002570  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002570  08002570  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002570  08002570  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002570  08002570  00003570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002574  08002574  00003574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002578  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08002584  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002584  00004164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e2e  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c9  00000000  00000000  0000ce63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0000e730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000823  00000000  00000000  0000f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001f5f  00000000  00000000  0000f9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b0d6  00000000  00000000  0001193a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce59  00000000  00000000  0001ca10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9869  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b68  00000000  00000000  000a98ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000ac414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002534 	.word	0x08002534

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002534 	.word	0x08002534

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fcaf 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f881 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa47 	bl	80005ec <MX_GPIO_Init>
  MX_ADC1_Init();
 800015e:	f000 f8d9 	bl	8000314 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000162:	f000 f915 	bl	8000390 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000166:	f000 f951 	bl	800040c <MX_TIM1_Init>
  MX_TIM2_Init();
 800016a:	f000 f99f 	bl	80004ac <MX_TIM2_Init>
  MX_TIM4_Init();
 800016e:	f000 f9ef 	bl	8000550 <MX_TIM4_Init>
  //__HAL_TIM_SET_COUNTER(&htim1,0);

  //ST7920_Init(&htim1);
  //ST7920_GraphicMode(1);
  //ST7920_Clear();
  HAL_Delay(1000);
 8000172:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000176:	f000 fcff 	bl	8000b78 <HAL_Delay>

  //HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
  HAL_TIM_Base_Start(&htim4);
 800017a:	4834      	ldr	r0, [pc, #208]	@ (800024c <main+0x100>)
 800017c:	f001 fe98 	bl	8001eb0 <HAL_TIM_Base_Start>

  HAL_GPIO_WritePin(LTC_GPIO_Port, LTC_Pin, 0);//Clock wise rotation
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000186:	4832      	ldr	r0, [pc, #200]	@ (8000250 <main+0x104>)
 8000188:	f001 f994 	bl	80014b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, 1);//Clock wise rotation
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000192:	482f      	ldr	r0, [pc, #188]	@ (8000250 <main+0x104>)
 8000194:	f001 f98e 	bl	80014b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, 1);//Clock wise rotation
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800019e:	482c      	ldr	r0, [pc, #176]	@ (8000250 <main+0x104>)
 80001a0:	f001 f988 	bl	80014b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin, 0);//Clock wise rotation
 80001a4:	2200      	movs	r2, #0
 80001a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001aa:	4829      	ldr	r0, [pc, #164]	@ (8000250 <main+0x104>)
 80001ac:	f001 f982 	bl	80014b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001b6:	4827      	ldr	r0, [pc, #156]	@ (8000254 <main+0x108>)
 80001b8:	f001 f97c 	bl	80014b4 <HAL_GPIO_WritePin>
				  HAL_Delay(100);
			  }
			  HAL_GPIO_WritePin(RGB_G_GPIO_Port, RGB_G_Pin, 0);
	  }
	  */
	  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);//Clock wise rotation
 80001bc:	2201      	movs	r2, #1
 80001be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001c2:	4824      	ldr	r0, [pc, #144]	@ (8000254 <main+0x108>)
 80001c4:	f001 f976 	bl	80014b4 <HAL_GPIO_WritePin>

	  for (int i = 0; i < 6400; i++) {
 80001c8:	2300      	movs	r3, #0
 80001ca:	607b      	str	r3, [r7, #4]
 80001cc:	e014      	b.n	80001f8 <main+0xac>
	      HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001d4:	4820      	ldr	r0, [pc, #128]	@ (8000258 <main+0x10c>)
 80001d6:	f001 f96d 	bl	80014b4 <HAL_GPIO_WritePin>
	      delay_us_motor(50);  // Very short pulse
 80001da:	2032      	movs	r0, #50	@ 0x32
 80001dc:	f000 fabe 	bl	800075c <delay_us_motor>
	      HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001e6:	481c      	ldr	r0, [pc, #112]	@ (8000258 <main+0x10c>)
 80001e8:	f001 f964 	bl	80014b4 <HAL_GPIO_WritePin>
	      delay_us_motor(50);
 80001ec:	2032      	movs	r0, #50	@ 0x32
 80001ee:	f000 fab5 	bl	800075c <delay_us_motor>
	  for (int i = 0; i < 6400; i++) {
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3301      	adds	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 80001fe:	dbe6      	blt.n	80001ce <main+0x82>
	  }

	  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 0);//Anti clock wise rotation
 8000200:	2200      	movs	r2, #0
 8000202:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000206:	4813      	ldr	r0, [pc, #76]	@ (8000254 <main+0x108>)
 8000208:	f001 f954 	bl	80014b4 <HAL_GPIO_WritePin>

	  for (int i = 0; i < 6400; i++) {
 800020c:	2300      	movs	r3, #0
 800020e:	603b      	str	r3, [r7, #0]
 8000210:	e014      	b.n	800023c <main+0xf0>
	      HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000218:	480f      	ldr	r0, [pc, #60]	@ (8000258 <main+0x10c>)
 800021a:	f001 f94b 	bl	80014b4 <HAL_GPIO_WritePin>
	      delay_us_motor(50);  // Very short pulse
 800021e:	2032      	movs	r0, #50	@ 0x32
 8000220:	f000 fa9c 	bl	800075c <delay_us_motor>
	      HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800022a:	480b      	ldr	r0, [pc, #44]	@ (8000258 <main+0x10c>)
 800022c:	f001 f942 	bl	80014b4 <HAL_GPIO_WritePin>
	      delay_us_motor(50);  // Very short pulse
 8000230:	2032      	movs	r0, #50	@ 0x32
 8000232:	f000 fa93 	bl	800075c <delay_us_motor>
	  for (int i = 0; i < 6400; i++) {
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	3301      	adds	r3, #1
 800023a:	603b      	str	r3, [r7, #0]
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	f5b3 5fc8 	cmp.w	r3, #6400	@ 0x1900
 8000242:	dbe6      	blt.n	8000212 <main+0xc6>

	  ST7920_Clear();
	  GLCD_Font_Print(0,3, message);
	  ST7920_Update();
	  */
	  HAL_Delay(10);
 8000244:	200a      	movs	r0, #10
 8000246:	f000 fc97 	bl	8000b78 <HAL_Delay>
	  HAL_GPIO_WritePin(STEP_GPIO_Port, STEP_Pin, 1);//Clock wise rotation
 800024a:	e7b7      	b.n	80001bc <main+0x70>
 800024c:	20000118 	.word	0x20000118
 8000250:	40011000 	.word	0x40011000
 8000254:	40010800 	.word	0x40010800
 8000258:	40010c00 	.word	0x40010c00

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b094      	sub	sp, #80	@ 0x50
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000266:	2228      	movs	r2, #40	@ 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 f936 	bl	80024dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028c:	2301      	movs	r3, #1
 800028e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000290:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80002ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 f916 	bl	80014e4 <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002be:	f000 fa65 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c6:	2302      	movs	r3, #2
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80002d4:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80002d8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002da:	f107 0314 	add.w	r3, r7, #20
 80002de:	2102      	movs	r1, #2
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 fb81 	bl	80019e8 <HAL_RCC_ClockConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80002ec:	f000 fa4e 	bl	800078c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002f0:	2302      	movs	r3, #2
 80002f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fcd2 	bl	8001ca4 <HAL_RCCEx_PeriphCLKConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000306:	f000 fa41 	bl	800078c <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3750      	adds	r7, #80	@ 0x50
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000324:	4b18      	ldr	r3, [pc, #96]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000326:	4a19      	ldr	r2, [pc, #100]	@ (800038c <MX_ADC1_Init+0x78>)
 8000328:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800032a:	4b17      	ldr	r3, [pc, #92]	@ (8000388 <MX_ADC1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000330:	4b15      	ldr	r3, [pc, #84]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <MX_ADC1_Init+0x74>)
 800033e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000342:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000344:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800034a:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <MX_ADC1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000350:	480d      	ldr	r0, [pc, #52]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000352:	f000 fc35 	bl	8000bc0 <HAL_ADC_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800035c:	f000 fa16 	bl	800078c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000364:	2301      	movs	r3, #1
 8000366:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	@ (8000388 <MX_ADC1_Init+0x74>)
 8000372:	f000 fcfd 	bl	8000d70 <HAL_ADC_ConfigChannel>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800037c:	f000 fa06 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000028 	.word	0x20000028
 800038c:	40012400 	.word	0x40012400

08000390 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80003a0:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003a2:	4a19      	ldr	r2, [pc, #100]	@ (8000408 <MX_ADC2_Init+0x78>)
 80003a4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003a6:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003ac:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80003b2:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003b8:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003ba:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003be:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003c0:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80003c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003cc:	480d      	ldr	r0, [pc, #52]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003ce:	f000 fbf7 	bl	8000bc0 <HAL_ADC_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80003d8:	f000 f9d8 	bl	800078c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003dc:	2301      	movs	r3, #1
 80003de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	@ (8000404 <MX_ADC2_Init+0x74>)
 80003ee:	f000 fcbf 	bl	8000d70 <HAL_ADC_ConfigChannel>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80003f8:	f000 f9c8 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3710      	adds	r7, #16
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000058 	.word	0x20000058
 8000408:	40012800 	.word	0x40012800

0800040c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000420:	463b      	mov	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <MX_TIM1_Init+0x98>)
 800042a:	4a1f      	ldr	r2, [pc, #124]	@ (80004a8 <MX_TIM1_Init+0x9c>)
 800042c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800042e:	4b1d      	ldr	r3, [pc, #116]	@ (80004a4 <MX_TIM1_Init+0x98>)
 8000430:	223f      	movs	r2, #63	@ 0x3f
 8000432:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <MX_TIM1_Init+0x98>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <MX_TIM1_Init+0x98>)
 800043c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000440:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000442:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <MX_TIM1_Init+0x98>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000448:	4b16      	ldr	r3, [pc, #88]	@ (80004a4 <MX_TIM1_Init+0x98>)
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <MX_TIM1_Init+0x98>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000454:	4813      	ldr	r0, [pc, #76]	@ (80004a4 <MX_TIM1_Init+0x98>)
 8000456:	f001 fcdb 	bl	8001e10 <HAL_TIM_Base_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000460:	f000 f994 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	4619      	mov	r1, r3
 8000470:	480c      	ldr	r0, [pc, #48]	@ (80004a4 <MX_TIM1_Init+0x98>)
 8000472:	f001 fe09 	bl	8002088 <HAL_TIM_ConfigClockSource>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800047c:	f000 f986 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000480:	2300      	movs	r3, #0
 8000482:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000488:	463b      	mov	r3, r7
 800048a:	4619      	mov	r1, r3
 800048c:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <MX_TIM1_Init+0x98>)
 800048e:	f001 ffc7 	bl	8002420 <HAL_TIMEx_MasterConfigSynchronization>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000498:	f000 f978 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800049c:	bf00      	nop
 800049e:	3718      	adds	r7, #24
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000088 	.word	0x20000088
 80004a8:	40012c00 	.word	0x40012c00

080004ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b08c      	sub	sp, #48	@ 0x30
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	2224      	movs	r2, #36	@ 0x24
 80004b8:	2100      	movs	r1, #0
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 f80e 	bl	80024dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004c8:	4b20      	ldr	r3, [pc, #128]	@ (800054c <MX_TIM2_Init+0xa0>)
 80004ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004d0:	4b1e      	ldr	r3, [pc, #120]	@ (800054c <MX_TIM2_Init+0xa0>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d6:	4b1d      	ldr	r3, [pc, #116]	@ (800054c <MX_TIM2_Init+0xa0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80004dc:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <MX_TIM2_Init+0xa0>)
 80004de:	2263      	movs	r2, #99	@ 0x63
 80004e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004e2:	4b1a      	ldr	r3, [pc, #104]	@ (800054c <MX_TIM2_Init+0xa0>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004e8:	4b18      	ldr	r3, [pc, #96]	@ (800054c <MX_TIM2_Init+0xa0>)
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004ee:	2303      	movs	r3, #3
 80004f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004f6:	2301      	movs	r3, #1
 80004f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80004fe:	230a      	movs	r3, #10
 8000500:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000502:	2300      	movs	r3, #0
 8000504:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000506:	2301      	movs	r3, #1
 8000508:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	4619      	mov	r1, r3
 8000518:	480c      	ldr	r0, [pc, #48]	@ (800054c <MX_TIM2_Init+0xa0>)
 800051a:	f001 fd13 	bl	8001f44 <HAL_TIM_Encoder_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000524:	f000 f932 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000528:	2300      	movs	r3, #0
 800052a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	4619      	mov	r1, r3
 8000534:	4805      	ldr	r0, [pc, #20]	@ (800054c <MX_TIM2_Init+0xa0>)
 8000536:	f001 ff73 	bl	8002420 <HAL_TIMEx_MasterConfigSynchronization>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000540:	f000 f924 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000544:	bf00      	nop
 8000546:	3730      	adds	r7, #48	@ 0x30
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200000d0 	.word	0x200000d0

08000550 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800056c:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <MX_TIM4_Init+0x94>)
 800056e:	4a1e      	ldr	r2, [pc, #120]	@ (80005e8 <MX_TIM4_Init+0x98>)
 8000570:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 8000572:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <MX_TIM4_Init+0x94>)
 8000574:	223f      	movs	r2, #63	@ 0x3f
 8000576:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000578:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <MX_TIM4_Init+0x94>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800057e:	4b19      	ldr	r3, [pc, #100]	@ (80005e4 <MX_TIM4_Init+0x94>)
 8000580:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000584:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000586:	4b17      	ldr	r3, [pc, #92]	@ (80005e4 <MX_TIM4_Init+0x94>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <MX_TIM4_Init+0x94>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000592:	4814      	ldr	r0, [pc, #80]	@ (80005e4 <MX_TIM4_Init+0x94>)
 8000594:	f001 fc3c 	bl	8001e10 <HAL_TIM_Base_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800059e:	f000 f8f5 	bl	800078c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	4619      	mov	r1, r3
 80005ae:	480d      	ldr	r0, [pc, #52]	@ (80005e4 <MX_TIM4_Init+0x94>)
 80005b0:	f001 fd6a 	bl	8002088 <HAL_TIM_ConfigClockSource>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80005ba:	f000 f8e7 	bl	800078c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4619      	mov	r1, r3
 80005ca:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <MX_TIM4_Init+0x94>)
 80005cc:	f001 ff28 	bl	8002420 <HAL_TIMEx_MasterConfigSynchronization>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80005d6:	f000 f8d9 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80005da:	bf00      	nop
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000118 	.word	0x20000118
 80005e8:	40000800 	.word	0x40000800

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000600:	4b51      	ldr	r3, [pc, #324]	@ (8000748 <MX_GPIO_Init+0x15c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a50      	ldr	r2, [pc, #320]	@ (8000748 <MX_GPIO_Init+0x15c>)
 8000606:	f043 0310 	orr.w	r3, r3, #16
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b4e      	ldr	r3, [pc, #312]	@ (8000748 <MX_GPIO_Init+0x15c>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000618:	4b4b      	ldr	r3, [pc, #300]	@ (8000748 <MX_GPIO_Init+0x15c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a4a      	ldr	r2, [pc, #296]	@ (8000748 <MX_GPIO_Init+0x15c>)
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b48      	ldr	r3, [pc, #288]	@ (8000748 <MX_GPIO_Init+0x15c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0320 	and.w	r3, r3, #32
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000630:	4b45      	ldr	r3, [pc, #276]	@ (8000748 <MX_GPIO_Init+0x15c>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a44      	ldr	r2, [pc, #272]	@ (8000748 <MX_GPIO_Init+0x15c>)
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b42      	ldr	r3, [pc, #264]	@ (8000748 <MX_GPIO_Init+0x15c>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0304 	and.w	r3, r3, #4
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000648:	4b3f      	ldr	r3, [pc, #252]	@ (8000748 <MX_GPIO_Init+0x15c>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a3e      	ldr	r2, [pc, #248]	@ (8000748 <MX_GPIO_Init+0x15c>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b3c      	ldr	r3, [pc, #240]	@ (8000748 <MX_GPIO_Init+0x15c>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0308 	and.w	r3, r3, #8
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LTC_Pin|RGB_G_Pin|RGB_B_Pin|RGB_R_Pin
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 517e 	mov.w	r1, #16256	@ 0x3f80
 8000666:	4839      	ldr	r0, [pc, #228]	@ (800074c <MX_GPIO_Init+0x160>)
 8000668:	f000 ff24 	bl	80014b4 <HAL_GPIO_WritePin>
                          |M1_Pin|M2_Pin|M3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GLCD_CS_Pin|GLCD_SID_Pin|STEP_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000672:	4837      	ldr	r0, [pc, #220]	@ (8000750 <MX_GPIO_Init+0x164>)
 8000674:	f000 ff1e 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GLCD_RST_Pin|DIR_Pin|GLCD_SCK_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f240 4141 	movw	r1, #1089	@ 0x441
 800067e:	4835      	ldr	r0, [pc, #212]	@ (8000754 <MX_GPIO_Init+0x168>)
 8000680:	f000 ff18 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LTC_Pin RGB_G_Pin RGB_B_Pin RGB_R_Pin
                           M1_Pin M2_Pin M3_Pin */
  GPIO_InitStruct.Pin = LTC_Pin|RGB_G_Pin|RGB_B_Pin|RGB_R_Pin
 8000684:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000688:	613b      	str	r3, [r7, #16]
                          |M1_Pin|M2_Pin|M3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2302      	movs	r3, #2
 8000694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	482b      	ldr	r0, [pc, #172]	@ (800074c <MX_GPIO_Init+0x160>)
 800069e:	f000 fd85 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Bconf_Pin Benc_Pin Bgen_stop_Pin Bleft_max_Pin
                           Bright_max_Pin */
  GPIO_InitStruct.Pin = Bconf_Pin|Benc_Pin|Bgen_stop_Pin|Bleft_max_Pin
 80006a2:	231f      	movs	r3, #31
 80006a4:	613b      	str	r3, [r7, #16]
                          |Bright_max_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <MX_GPIO_Init+0x16c>)
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4619      	mov	r1, r3
 80006b4:	4825      	ldr	r0, [pc, #148]	@ (800074c <MX_GPIO_Init+0x160>)
 80006b6:	f000 fd79 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCD_CS_Pin GLCD_SID_Pin STEP_Pin */
  GPIO_InitStruct.Pin = GLCD_CS_Pin|GLCD_SID_Pin|STEP_Pin;
 80006ba:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80006be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	481f      	ldr	r0, [pc, #124]	@ (8000750 <MX_GPIO_Init+0x164>)
 80006d4:	f000 fd6a 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Bleft_fast_Pin Bright_fast_Pin */
  GPIO_InitStruct.Pin = Bleft_fast_Pin|Bright_fast_Pin;
 80006d8:	2360      	movs	r3, #96	@ 0x60
 80006da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4818      	ldr	r0, [pc, #96]	@ (800074c <MX_GPIO_Init+0x160>)
 80006ec:	f000 fd5e 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : GLCD_RST_Pin DIR_Pin GLCD_SCK_Pin */
  GPIO_InitStruct.Pin = GLCD_RST_Pin|DIR_Pin|GLCD_SCK_Pin;
 80006f0:	f240 4341 	movw	r3, #1089	@ 0x441
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f6:	2301      	movs	r3, #1
 80006f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	2302      	movs	r3, #2
 8000700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4619      	mov	r1, r3
 8000708:	4812      	ldr	r0, [pc, #72]	@ (8000754 <MX_GPIO_Init+0x168>)
 800070a:	f000 fd4f 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_Pin Left_Pin */
  GPIO_InitStruct.Pin = Right_Pin|Left_Pin;
 800070e:	2306      	movs	r3, #6
 8000710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4619      	mov	r1, r3
 8000720:	480c      	ldr	r0, [pc, #48]	@ (8000754 <MX_GPIO_Init+0x168>)
 8000722:	f000 fd43 	bl	80011ac <HAL_GPIO_Init>

  /*Configure GPIO pins : Enc_CLK_Pin Enc_DT_Pin */
  GPIO_InitStruct.Pin = Enc_CLK_Pin|Enc_DT_Pin;
 8000726:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072c:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <MX_GPIO_Init+0x16c>)
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	4619      	mov	r1, r3
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_GPIO_Init+0x164>)
 800073c:	f000 fd36 	bl	80011ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021000 	.word	0x40021000
 800074c:	40011000 	.word	0x40011000
 8000750:	40010800 	.word	0x40010800
 8000754:	40010c00 	.word	0x40010c00
 8000758:	10110000 	.word	0x10110000

0800075c <delay_us_motor>:

/* USER CODE BEGIN 4 */
void delay_us_motor (uint16_t us) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);
 8000766:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <delay_us_motor+0x2c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);
 800076e:	bf00      	nop
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <delay_us_motor+0x2c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	429a      	cmp	r2, r3
 800077a:	d3f9      	bcc.n	8000770 <delay_us_motor+0x14>
}
 800077c:	bf00      	nop
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	20000118 	.word	0x20000118

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <Error_Handler+0x8>

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a14      	ldr	r2, [pc, #80]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a0e      	ldr	r2, [pc, #56]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <HAL_MspInit+0x5c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ce:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <HAL_MspInit+0x60>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	4a04      	ldr	r2, [pc, #16]	@ (80007f8 <HAL_MspInit+0x60>)
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3714      	adds	r7, #20
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010000 	.word	0x40010000

080007fc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	@ 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0318 	add.w	r3, r7, #24
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a28      	ldr	r2, [pc, #160]	@ (80008b8 <HAL_ADC_MspInit+0xbc>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d122      	bne.n	8000862 <HAL_ADC_MspInit+0x66>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800081c:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a26      	ldr	r2, [pc, #152]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 8000822:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000834:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a20      	ldr	r2, [pc, #128]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000850:	2303      	movs	r3, #3
 8000852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	4619      	mov	r1, r3
 800085a:	4819      	ldr	r0, [pc, #100]	@ (80008c0 <HAL_ADC_MspInit+0xc4>)
 800085c:	f000 fca6 	bl	80011ac <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000860:	e026      	b.n	80008b0 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <HAL_ADC_MspInit+0xc8>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d121      	bne.n	80008b0 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 8000872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a0c      	ldr	r2, [pc, #48]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 800088a:	f043 0304 	orr.w	r3, r3, #4
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <HAL_ADC_MspInit+0xc0>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0304 	and.w	r3, r3, #4
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800089c:	2302      	movs	r3, #2
 800089e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a0:	2303      	movs	r3, #3
 80008a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	f107 0318 	add.w	r3, r7, #24
 80008a8:	4619      	mov	r1, r3
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <HAL_ADC_MspInit+0xc4>)
 80008ac:	f000 fc7e 	bl	80011ac <HAL_GPIO_Init>
}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	@ 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40012400 	.word	0x40012400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	40010800 	.word	0x40010800
 80008c4:	40012800 	.word	0x40012800

080008c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <HAL_TIM_Base_MspInit+0x58>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d10c      	bne.n	80008f4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 80008e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008e4:	6193      	str	r3, [r2, #24]
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80008f2:	e010      	b.n	8000916 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000928 <HAL_TIM_Base_MspInit+0x60>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10b      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_TIM_Base_MspInit+0x5c>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40012c00 	.word	0x40012c00
 8000924:	40021000 	.word	0x40021000
 8000928:	40000800 	.word	0x40000800

0800092c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	@ 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800094a:	d14e      	bne.n	80009ea <HAL_TIM_Encoder_MspInit+0xbe>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800094c:	4b29      	ldr	r3, [pc, #164]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	4a28      	ldr	r2, [pc, #160]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	61d3      	str	r3, [r2, #28]
 8000958:	4b26      	ldr	r3, [pc, #152]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800095a:	69db      	ldr	r3, [r3, #28]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000964:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	4a22      	ldr	r2, [pc, #136]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6193      	str	r3, [r2, #24]
 8000970:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	4a1c      	ldr	r2, [pc, #112]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000982:	f043 0308 	orr.w	r3, r3, #8
 8000986:	6193      	str	r3, [r2, #24]
 8000988:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <HAL_TIM_Encoder_MspInit+0xc8>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	f003 0308 	and.w	r3, r3, #8
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000994:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4813      	ldr	r0, [pc, #76]	@ (80009f8 <HAL_TIM_Encoder_MspInit+0xcc>)
 80009aa:	f000 fbff 	bl	80011ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009ae:	2308      	movs	r3, #8
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	480e      	ldr	r0, [pc, #56]	@ (80009fc <HAL_TIM_Encoder_MspInit+0xd0>)
 80009c2:	f000 fbf3 	bl	80011ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <HAL_TIM_Encoder_MspInit+0xd4>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80009cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80009d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
 80009dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80009e4:	4a06      	ldr	r2, [pc, #24]	@ (8000a00 <HAL_TIM_Encoder_MspInit+0xd4>)
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	6053      	str	r3, [r2, #4]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	@ 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40010800 	.word	0x40010800
 80009fc:	40010c00 	.word	0x40010c00
 8000a00:	40010000 	.word	0x40010000

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <NMI_Handler+0x4>

08000a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <BusFault_Handler+0x4>

08000a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <UsageFault_Handler+0x4>

08000a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a54:	f000 f874 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a68:	f7ff fff8 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a6e:	490c      	ldr	r1, [pc, #48]	@ (8000aa0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a70:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a09      	ldr	r2, [pc, #36]	@ (8000aa8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a84:	4c09      	ldr	r4, [pc, #36]	@ (8000aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f001 fd2b 	bl	80024ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fb59 	bl	800014c <main>
  bx lr
 8000a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa4:	08002578 	.word	0x08002578
  ldr r2, =_sbss
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aac:	20000164 	.word	0x20000164

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	@ (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 fb3d 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	200f      	movs	r0, #15
 8000acc:	f000 f808 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fe62 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_InitTick+0x54>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <HAL_InitTick+0x58>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	4619      	mov	r1, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fb47 	bl	8001192 <HAL_SYSTICK_Config>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00e      	b.n	8000b2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b0f      	cmp	r3, #15
 8000b12:	d80a      	bhi.n	8000b2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b1c:	f000 fb1d 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b20:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <HAL_InitTick+0x5c>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	e000      	b.n	8000b2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a03      	ldr	r2, [pc, #12]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	20000160 	.word	0x20000160

08000b64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b02      	ldr	r3, [pc, #8]	@ (8000b74 <HAL_GetTick+0x10>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	20000160 	.word	0x20000160

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff fff0 	bl	8000b64 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffe0 	bl	8000b64 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e0be      	b.n	8000d60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d109      	bne.n	8000c04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff fdfc 	bl	80007fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f000 f9ab 	bl	8000f60 <ADC_ConversionStop_Disable>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c12:	f003 0310 	and.w	r3, r3, #16
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8099 	bne.w	8000d4e <HAL_ADC_Init+0x18e>
 8000c1c:	7dfb      	ldrb	r3, [r7, #23]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 8095 	bne.w	8000d4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c2c:	f023 0302 	bic.w	r3, r3, #2
 8000c30:	f043 0202 	orr.w	r2, r3, #2
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7b1b      	ldrb	r3, [r3, #12]
 8000c46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c58:	d003      	beq.n	8000c62 <HAL_ADC_Init+0xa2>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d102      	bne.n	8000c68 <HAL_ADC_Init+0xa8>
 8000c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c66:	e000      	b.n	8000c6a <HAL_ADC_Init+0xaa>
 8000c68:	2300      	movs	r3, #0
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7d1b      	ldrb	r3, [r3, #20]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d119      	bne.n	8000cac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	7b1b      	ldrb	r3, [r3, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d109      	bne.n	8000c94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	3b01      	subs	r3, #1
 8000c86:	035a      	lsls	r2, r3, #13
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	e00b      	b.n	8000cac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c98:	f043 0220 	orr.w	r2, r3, #32
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca4:	f043 0201 	orr.w	r2, r3, #1
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <HAL_ADC_Init+0x1a8>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	6812      	ldr	r2, [r2, #0]
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	430b      	orrs	r3, r1
 8000cd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cdc:	d003      	beq.n	8000ce6 <HAL_ADC_Init+0x126>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d104      	bne.n	8000cf0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	051b      	lsls	r3, r3, #20
 8000cee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <HAL_ADC_Init+0x1ac>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d10b      	bne.n	8000d2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d1e:	f023 0303 	bic.w	r3, r3, #3
 8000d22:	f043 0201 	orr.w	r2, r3, #1
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d2a:	e018      	b.n	8000d5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d30:	f023 0312 	bic.w	r3, r3, #18
 8000d34:	f043 0210 	orr.w	r2, r3, #16
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d40:	f043 0201 	orr.w	r2, r3, #1
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d4c:	e007      	b.n	8000d5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d52:	f043 0210 	orr.w	r2, r3, #16
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	ffe1f7fd 	.word	0xffe1f7fd
 8000d6c:	ff1f0efe 	.word	0xff1f0efe

08000d70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d101      	bne.n	8000d90 <HAL_ADC_ConfigChannel+0x20>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e0dc      	b.n	8000f4a <HAL_ADC_ConfigChannel+0x1da>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d81c      	bhi.n	8000dda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	3b05      	subs	r3, #5
 8000db2:	221f      	movs	r2, #31
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4019      	ands	r1, r3
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	3b05      	subs	r3, #5
 8000dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dd8:	e03c      	b.n	8000e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b0c      	cmp	r3, #12
 8000de0:	d81c      	bhi.n	8000e1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	3b23      	subs	r3, #35	@ 0x23
 8000df4:	221f      	movs	r2, #31
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	4019      	ands	r1, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3b23      	subs	r3, #35	@ 0x23
 8000e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e1a:	e01b      	b.n	8000e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3b41      	subs	r3, #65	@ 0x41
 8000e2e:	221f      	movs	r2, #31
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4019      	ands	r1, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	3b41      	subs	r3, #65	@ 0x41
 8000e48:	fa00 f203 	lsl.w	r2, r0, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b09      	cmp	r3, #9
 8000e5a:	d91c      	bls.n	8000e96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68d9      	ldr	r1, [r3, #12]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3b1e      	subs	r3, #30
 8000e6e:	2207      	movs	r2, #7
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4019      	ands	r1, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6898      	ldr	r0, [r3, #8]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	3b1e      	subs	r3, #30
 8000e88:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	e019      	b.n	8000eca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6919      	ldr	r1, [r3, #16]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	4019      	ands	r1, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	6898      	ldr	r0, [r3, #8]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b10      	cmp	r3, #16
 8000ed0:	d003      	beq.n	8000eda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ed6:	2b11      	cmp	r3, #17
 8000ed8:	d132      	bne.n	8000f40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d125      	bne.n	8000f30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d126      	bne.n	8000f40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b10      	cmp	r3, #16
 8000f08:	d11a      	bne.n	8000f40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a13      	ldr	r2, [pc, #76]	@ (8000f5c <HAL_ADC_ConfigChannel+0x1ec>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	0c9a      	lsrs	r2, r3, #18
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f20:	e002      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f9      	bne.n	8000f22 <HAL_ADC_ConfigChannel+0x1b2>
 8000f2e:	e007      	b.n	8000f40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f34:	f043 0220 	orr.w	r2, r3, #32
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40012400 	.word	0x40012400
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	431bde83 	.word	0x431bde83

08000f60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d12e      	bne.n	8000fd8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0201 	bic.w	r2, r2, #1
 8000f88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f8a:	f7ff fdeb 	bl	8000b64 <HAL_GetTick>
 8000f8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f90:	e01b      	b.n	8000fca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f92:	f7ff fde7 	bl	8000b64 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d914      	bls.n	8000fca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d10d      	bne.n	8000fca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb2:	f043 0210 	orr.w	r2, r3, #16
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e007      	b.n	8000fda <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d0dc      	beq.n	8000f92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001000:	4013      	ands	r3, r2
 8001002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800100c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001016:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <__NVIC_SetPriorityGrouping+0x44>)
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	60d3      	str	r3, [r2, #12]
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <__NVIC_GetPriorityGrouping+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	f003 0307 	and.w	r3, r3, #7
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	@ (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	@ 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	@ (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001124:	f7ff ff90 	bl	8001048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	@ (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff49 	bl	8000fe4 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff5e 	bl	800102c <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff90 	bl	800109c <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5f 	bl	8001048 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffb0 	bl	8001100 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b08b      	sub	sp, #44	@ 0x2c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	e169      	b.n	8001494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c0:	2201      	movs	r2, #1
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	429a      	cmp	r2, r3
 80011da:	f040 8158 	bne.w	800148e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4a9a      	ldr	r2, [pc, #616]	@ (800144c <HAL_GPIO_Init+0x2a0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d05e      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 80011e8:	4a98      	ldr	r2, [pc, #608]	@ (800144c <HAL_GPIO_Init+0x2a0>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d875      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 80011ee:	4a98      	ldr	r2, [pc, #608]	@ (8001450 <HAL_GPIO_Init+0x2a4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d058      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 80011f4:	4a96      	ldr	r2, [pc, #600]	@ (8001450 <HAL_GPIO_Init+0x2a4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d86f      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 80011fa:	4a96      	ldr	r2, [pc, #600]	@ (8001454 <HAL_GPIO_Init+0x2a8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d052      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 8001200:	4a94      	ldr	r2, [pc, #592]	@ (8001454 <HAL_GPIO_Init+0x2a8>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d869      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 8001206:	4a94      	ldr	r2, [pc, #592]	@ (8001458 <HAL_GPIO_Init+0x2ac>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d04c      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 800120c:	4a92      	ldr	r2, [pc, #584]	@ (8001458 <HAL_GPIO_Init+0x2ac>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d863      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 8001212:	4a92      	ldr	r2, [pc, #584]	@ (800145c <HAL_GPIO_Init+0x2b0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d046      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
 8001218:	4a90      	ldr	r2, [pc, #576]	@ (800145c <HAL_GPIO_Init+0x2b0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d85d      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 800121e:	2b12      	cmp	r3, #18
 8001220:	d82a      	bhi.n	8001278 <HAL_GPIO_Init+0xcc>
 8001222:	2b12      	cmp	r3, #18
 8001224:	d859      	bhi.n	80012da <HAL_GPIO_Init+0x12e>
 8001226:	a201      	add	r2, pc, #4	@ (adr r2, 800122c <HAL_GPIO_Init+0x80>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	080012a7 	.word	0x080012a7
 8001230:	08001281 	.word	0x08001281
 8001234:	08001293 	.word	0x08001293
 8001238:	080012d5 	.word	0x080012d5
 800123c:	080012db 	.word	0x080012db
 8001240:	080012db 	.word	0x080012db
 8001244:	080012db 	.word	0x080012db
 8001248:	080012db 	.word	0x080012db
 800124c:	080012db 	.word	0x080012db
 8001250:	080012db 	.word	0x080012db
 8001254:	080012db 	.word	0x080012db
 8001258:	080012db 	.word	0x080012db
 800125c:	080012db 	.word	0x080012db
 8001260:	080012db 	.word	0x080012db
 8001264:	080012db 	.word	0x080012db
 8001268:	080012db 	.word	0x080012db
 800126c:	080012db 	.word	0x080012db
 8001270:	08001289 	.word	0x08001289
 8001274:	0800129d 	.word	0x0800129d
 8001278:	4a79      	ldr	r2, [pc, #484]	@ (8001460 <HAL_GPIO_Init+0x2b4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800127e:	e02c      	b.n	80012da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e029      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	3304      	adds	r3, #4
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	e024      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	3308      	adds	r3, #8
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e01f      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	330c      	adds	r3, #12
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e01a      	b.n	80012dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012ae:	2304      	movs	r3, #4
 80012b0:	623b      	str	r3, [r7, #32]
          break;
 80012b2:	e013      	b.n	80012dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d105      	bne.n	80012c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012bc:	2308      	movs	r3, #8
 80012be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	611a      	str	r2, [r3, #16]
          break;
 80012c6:	e009      	b.n	80012dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c8:	2308      	movs	r3, #8
 80012ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	615a      	str	r2, [r3, #20]
          break;
 80012d2:	e003      	b.n	80012dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
          break;
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x130>
          break;
 80012da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2bff      	cmp	r3, #255	@ 0xff
 80012e0:	d801      	bhi.n	80012e6 <HAL_GPIO_Init+0x13a>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	e001      	b.n	80012ea <HAL_GPIO_Init+0x13e>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3304      	adds	r3, #4
 80012ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2bff      	cmp	r3, #255	@ 0xff
 80012f0:	d802      	bhi.n	80012f8 <HAL_GPIO_Init+0x14c>
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_Init+0x152>
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fa:	3b08      	subs	r3, #8
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	210f      	movs	r1, #15
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	401a      	ands	r2, r3
 8001310:	6a39      	ldr	r1, [r7, #32]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	431a      	orrs	r2, r3
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80b1 	beq.w	800148e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800132c:	4b4d      	ldr	r3, [pc, #308]	@ (8001464 <HAL_GPIO_Init+0x2b8>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a4c      	ldr	r2, [pc, #304]	@ (8001464 <HAL_GPIO_Init+0x2b8>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b4a      	ldr	r3, [pc, #296]	@ (8001464 <HAL_GPIO_Init+0x2b8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001344:	4a48      	ldr	r2, [pc, #288]	@ (8001468 <HAL_GPIO_Init+0x2bc>)
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a40      	ldr	r2, [pc, #256]	@ (800146c <HAL_GPIO_Init+0x2c0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d013      	beq.n	8001398 <HAL_GPIO_Init+0x1ec>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a3f      	ldr	r2, [pc, #252]	@ (8001470 <HAL_GPIO_Init+0x2c4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d00d      	beq.n	8001394 <HAL_GPIO_Init+0x1e8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a3e      	ldr	r2, [pc, #248]	@ (8001474 <HAL_GPIO_Init+0x2c8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d007      	beq.n	8001390 <HAL_GPIO_Init+0x1e4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a3d      	ldr	r2, [pc, #244]	@ (8001478 <HAL_GPIO_Init+0x2cc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d101      	bne.n	800138c <HAL_GPIO_Init+0x1e0>
 8001388:	2303      	movs	r3, #3
 800138a:	e006      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 800138c:	2304      	movs	r3, #4
 800138e:	e004      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001390:	2302      	movs	r3, #2
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_GPIO_Init+0x1ee>
 8001398:	2300      	movs	r3, #0
 800139a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4093      	lsls	r3, r2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013aa:	492f      	ldr	r1, [pc, #188]	@ (8001468 <HAL_GPIO_Init+0x2bc>)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	492c      	ldr	r1, [pc, #176]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	608b      	str	r3, [r1, #8]
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013d2:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	43db      	mvns	r3, r3
 80013da:	4928      	ldr	r1, [pc, #160]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 80013dc:	4013      	ands	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d006      	beq.n	80013fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013ec:	4b23      	ldr	r3, [pc, #140]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	4922      	ldr	r1, [pc, #136]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	60cb      	str	r3, [r1, #12]
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013fa:	4b20      	ldr	r3, [pc, #128]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	43db      	mvns	r3, r3
 8001402:	491e      	ldr	r1, [pc, #120]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 8001404:	4013      	ands	r3, r2
 8001406:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001414:	4b19      	ldr	r3, [pc, #100]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4918      	ldr	r1, [pc, #96]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 8001424:	685a      	ldr	r2, [r3, #4]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	4914      	ldr	r1, [pc, #80]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d021      	beq.n	8001480 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	490e      	ldr	r1, [pc, #56]	@ (800147c <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e021      	b.n	800148e <HAL_GPIO_Init+0x2e2>
 800144a:	bf00      	nop
 800144c:	10320000 	.word	0x10320000
 8001450:	10310000 	.word	0x10310000
 8001454:	10220000 	.word	0x10220000
 8001458:	10210000 	.word	0x10210000
 800145c:	10120000 	.word	0x10120000
 8001460:	10110000 	.word	0x10110000
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000
 800146c:	40010800 	.word	0x40010800
 8001470:	40010c00 	.word	0x40010c00
 8001474:	40011000 	.word	0x40011000
 8001478:	40011400 	.word	0x40011400
 800147c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <HAL_GPIO_Init+0x304>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	43db      	mvns	r3, r3
 8001488:	4909      	ldr	r1, [pc, #36]	@ (80014b0 <HAL_GPIO_Init+0x304>)
 800148a:	4013      	ands	r3, r2
 800148c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	3301      	adds	r3, #1
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149a:	fa22 f303 	lsr.w	r3, r2, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f47f ae8e 	bne.w	80011c0 <HAL_GPIO_Init+0x14>
  }
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	372c      	adds	r7, #44	@ 0x2c
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	40010400 	.word	0x40010400

080014b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c4:	787b      	ldrb	r3, [r7, #1]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014d0:	e003      	b.n	80014da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	041a      	lsls	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	611a      	str	r2, [r3, #16]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e272      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8087 	beq.w	8001612 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001504:	4b92      	ldr	r3, [pc, #584]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b04      	cmp	r3, #4
 800150e:	d00c      	beq.n	800152a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001510:	4b8f      	ldr	r3, [pc, #572]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d112      	bne.n	8001542 <HAL_RCC_OscConfig+0x5e>
 800151c:	4b8c      	ldr	r3, [pc, #560]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001528:	d10b      	bne.n	8001542 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152a:	4b89      	ldr	r3, [pc, #548]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d06c      	beq.n	8001610 <HAL_RCC_OscConfig+0x12c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d168      	bne.n	8001610 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e24c      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x76>
 800154c:	4b80      	ldr	r3, [pc, #512]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a7f      	ldr	r2, [pc, #508]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e02e      	b.n	80015b8 <HAL_RCC_OscConfig+0xd4>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x98>
 8001562:	4b7b      	ldr	r3, [pc, #492]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a7a      	ldr	r2, [pc, #488]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001568:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b78      	ldr	r3, [pc, #480]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a77      	ldr	r2, [pc, #476]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001574:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e01d      	b.n	80015b8 <HAL_RCC_OscConfig+0xd4>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0xbc>
 8001586:	4b72      	ldr	r3, [pc, #456]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a71      	ldr	r2, [pc, #452]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b6f      	ldr	r3, [pc, #444]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a6e      	ldr	r2, [pc, #440]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0xd4>
 80015a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b68      	ldr	r3, [pc, #416]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a67      	ldr	r2, [pc, #412]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fad0 	bl	8000b64 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff facc 	bl	8000b64 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	@ 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e200      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b5d      	ldr	r3, [pc, #372]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0xe4>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fabc 	bl	8000b64 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fab8 	bl	8000b64 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	@ 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1ec      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	4b53      	ldr	r3, [pc, #332]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x10c>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d063      	beq.n	80016e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800161e:	4b4c      	ldr	r3, [pc, #304]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800162a:	4b49      	ldr	r3, [pc, #292]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b08      	cmp	r3, #8
 8001634:	d11c      	bne.n	8001670 <HAL_RCC_OscConfig+0x18c>
 8001636:	4b46      	ldr	r3, [pc, #280]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	4b43      	ldr	r3, [pc, #268]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x176>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e1c0      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b3d      	ldr	r3, [pc, #244]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4939      	ldr	r1, [pc, #228]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	e03a      	b.n	80016e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001678:	4b36      	ldr	r3, [pc, #216]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fa71 	bl	8000b64 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fa6d 	bl	8000b64 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1a1      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	4b2d      	ldr	r3, [pc, #180]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4927      	ldr	r1, [pc, #156]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ba:	4b26      	ldr	r3, [pc, #152]	@ (8001754 <HAL_RCC_OscConfig+0x270>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fa50 	bl	8000b64 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c8:	f7ff fa4c 	bl	8000b64 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e180      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d03a      	beq.n	8001768 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d019      	beq.n	800172e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <HAL_RCC_OscConfig+0x274>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fa30 	bl	8000b64 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fa2c 	bl	8000b64 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e160      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <HAL_RCC_OscConfig+0x26c>)
 800171c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001726:	2001      	movs	r0, #1
 8001728:	f000 fa9e 	bl	8001c68 <RCC_Delay>
 800172c:	e01c      	b.n	8001768 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_RCC_OscConfig+0x274>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff fa16 	bl	8000b64 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173a:	e00f      	b.n	800175c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fa12 	bl	8000b64 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d908      	bls.n	800175c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e146      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	42420000 	.word	0x42420000
 8001758:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175c:	4b92      	ldr	r3, [pc, #584]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1e9      	bne.n	800173c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80a6 	beq.w	80018c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177a:	4b8b      	ldr	r3, [pc, #556]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10d      	bne.n	80017a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b88      	ldr	r3, [pc, #544]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a87      	ldr	r2, [pc, #540]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b85      	ldr	r3, [pc, #532]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b82      	ldr	r3, [pc, #520]	@ (80019ac <HAL_RCC_OscConfig+0x4c8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d118      	bne.n	80017e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ae:	4b7f      	ldr	r3, [pc, #508]	@ (80019ac <HAL_RCC_OscConfig+0x4c8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a7e      	ldr	r2, [pc, #504]	@ (80019ac <HAL_RCC_OscConfig+0x4c8>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff f9d3 	bl	8000b64 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c2:	f7ff f9cf 	bl	8000b64 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b64      	cmp	r3, #100	@ 0x64
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e103      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	4b75      	ldr	r3, [pc, #468]	@ (80019ac <HAL_RCC_OscConfig+0x4c8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x312>
 80017e8:	4b6f      	ldr	r3, [pc, #444]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a6e      	ldr	r2, [pc, #440]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	e02d      	b.n	8001852 <HAL_RCC_OscConfig+0x36e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x334>
 80017fe:	4b6a      	ldr	r3, [pc, #424]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a69      	ldr	r2, [pc, #420]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6213      	str	r3, [r2, #32]
 800180a:	4b67      	ldr	r3, [pc, #412]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a66      	ldr	r2, [pc, #408]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	e01c      	b.n	8001852 <HAL_RCC_OscConfig+0x36e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d10c      	bne.n	800183a <HAL_RCC_OscConfig+0x356>
 8001820:	4b61      	ldr	r3, [pc, #388]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4a60      	ldr	r2, [pc, #384]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	f043 0304 	orr.w	r3, r3, #4
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	4b5e      	ldr	r3, [pc, #376]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a5d      	ldr	r2, [pc, #372]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	e00b      	b.n	8001852 <HAL_RCC_OscConfig+0x36e>
 800183a:	4b5b      	ldr	r3, [pc, #364]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4a5a      	ldr	r2, [pc, #360]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	6213      	str	r3, [r2, #32]
 8001846:	4b58      	ldr	r3, [pc, #352]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a57      	ldr	r2, [pc, #348]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 800184c:	f023 0304 	bic.w	r3, r3, #4
 8001850:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d015      	beq.n	8001886 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff f983 	bl	8000b64 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001860:	e00a      	b.n	8001878 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001862:	f7ff f97f 	bl	8000b64 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e0b1      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001878:	4b4b      	ldr	r3, [pc, #300]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ee      	beq.n	8001862 <HAL_RCC_OscConfig+0x37e>
 8001884:	e014      	b.n	80018b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001886:	f7ff f96d 	bl	8000b64 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188e:	f7ff f969 	bl	8000b64 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800189c:	4293      	cmp	r3, r2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e09b      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	4b40      	ldr	r3, [pc, #256]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ee      	bne.n	800188e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d105      	bne.n	80018c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b6:	4b3c      	ldr	r3, [pc, #240]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a3b      	ldr	r2, [pc, #236]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8087 	beq.w	80019da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018cc:	4b36      	ldr	r3, [pc, #216]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d061      	beq.n	800199c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d146      	bne.n	800196e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e0:	4b33      	ldr	r3, [pc, #204]	@ (80019b0 <HAL_RCC_OscConfig+0x4cc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e6:	f7ff f93d 	bl	8000b64 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ee:	f7ff f939 	bl	8000b64 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e06d      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001900:	4b29      	ldr	r3, [pc, #164]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1f0      	bne.n	80018ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001914:	d108      	bne.n	8001928 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001916:	4b24      	ldr	r3, [pc, #144]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	4921      	ldr	r1, [pc, #132]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001928:	4b1f      	ldr	r3, [pc, #124]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a19      	ldr	r1, [r3, #32]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	430b      	orrs	r3, r1
 800193a:	491b      	ldr	r1, [pc, #108]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_RCC_OscConfig+0x4cc>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff f90d 	bl	8000b64 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff f909 	bl	8000b64 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e03d      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001960:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x46a>
 800196c:	e035      	b.n	80019da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <HAL_RCC_OscConfig+0x4cc>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff f8f6 	bl	8000b64 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f8f2 	bl	8000b64 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e026      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198e:	4b06      	ldr	r3, [pc, #24]	@ (80019a8 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x498>
 800199a:	e01e      	b.n	80019da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e019      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40007000 	.word	0x40007000
 80019b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019b4:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <HAL_RCC_OscConfig+0x500>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000

080019e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0d0      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b6a      	ldr	r3, [pc, #424]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d910      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b67      	ldr	r3, [pc, #412]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 0207 	bic.w	r2, r3, #7
 8001a12:	4965      	ldr	r1, [pc, #404]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b8      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a44:	4b59      	ldr	r3, [pc, #356]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a58      	ldr	r2, [pc, #352]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a5c:	4b53      	ldr	r3, [pc, #332]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4a52      	ldr	r2, [pc, #328]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b50      	ldr	r3, [pc, #320]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	494d      	ldr	r1, [pc, #308]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d040      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d115      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b41      	ldr	r3, [pc, #260]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e073      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06b      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b39      	ldr	r3, [pc, #228]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4936      	ldr	r1, [pc, #216]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f844 	bl	8000b64 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff f840 	bl	8000b64 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e053      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2d      	ldr	r3, [pc, #180]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b27      	ldr	r3, [pc, #156]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d210      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 0207 	bic.w	r2, r3, #7
 8001b1e:	4922      	ldr	r1, [pc, #136]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e032      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4916      	ldr	r1, [pc, #88]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	490e      	ldr	r1, [pc, #56]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b76:	f000 f821 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	490a      	ldr	r1, [pc, #40]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b88:	5ccb      	ldrb	r3, [r1, r3]
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe ffa2 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	0800254c 	.word	0x0800254c
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d002      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x30>
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d003      	beq.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x36>
 8001bea:	e027      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bec:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bee:	613b      	str	r3, [r7, #16]
      break;
 8001bf0:	e027      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	0c9b      	lsrs	r3, r3, #18
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	4a17      	ldr	r2, [pc, #92]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bfc:	5cd3      	ldrb	r3, [r2, r3]
 8001bfe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d010      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	0c5b      	lsrs	r3, r3, #17
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	4a11      	ldr	r2, [pc, #68]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c54 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c1e:	fb03 f202 	mul.w	r2, r3, r2
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	e004      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	613b      	str	r3, [r7, #16]
      break;
 8001c3a:	e002      	b.n	8001c42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001c3e:	613b      	str	r3, [r7, #16]
      break;
 8001c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c42:	693b      	ldr	r3, [r7, #16]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	00f42400 	.word	0x00f42400
 8001c58:	0800255c 	.word	0x0800255c
 8001c5c:	0800256c 	.word	0x0800256c
 8001c60:	003d0900 	.word	0x003d0900
 8001c64:	007a1200 	.word	0x007a1200

08001c68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c70:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <RCC_Delay+0x34>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <RCC_Delay+0x38>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	0a5b      	lsrs	r3, r3, #9
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c84:	bf00      	nop
  }
  while (Delay --);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1e5a      	subs	r2, r3, #1
 8001c8a:	60fa      	str	r2, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1f9      	bne.n	8001c84 <RCC_Delay+0x1c>
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	10624dd3 	.word	0x10624dd3

08001ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d07d      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc6:	69db      	ldr	r3, [r3, #28]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10d      	bne.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	61d3      	str	r3, [r2, #28]
 8001cdc:	4b49      	ldr	r3, [pc, #292]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	4b46      	ldr	r3, [pc, #280]	@ (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d118      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf8:	4b43      	ldr	r3, [pc, #268]	@ (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a42      	ldr	r2, [pc, #264]	@ (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d04:	f7fe ff2e 	bl	8000b64 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	e008      	b.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0c:	f7fe ff2a 	bl	8000b64 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	@ 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e06d      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d2a:	4b36      	ldr	r3, [pc, #216]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d02e      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d027      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d48:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d52:	4b2e      	ldr	r3, [pc, #184]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d58:	4b2c      	ldr	r3, [pc, #176]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d5e:	4a29      	ldr	r2, [pc, #164]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d014      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fef9 	bl	8000b64 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d76:	f7fe fef5 	bl	8000b64 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e036      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ee      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d98:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9a:	6a1b      	ldr	r3, [r3, #32]
 8001d9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4917      	ldr	r1, [pc, #92]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db0:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	4a13      	ldr	r2, [pc, #76]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	490b      	ldr	r1, [pc, #44]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4904      	ldr	r1, [pc, #16]	@ (8001e04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	42420440 	.word	0x42420440

08001e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e041      	b.n	8001ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7fe fd46 	bl	80008c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f000 f9e2 	bl	8002218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d001      	beq.n	8001ec8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e032      	b.n	8001f2e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	@ (8001f38 <HAL_TIM_Base_Start+0x88>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d00e      	beq.n	8001ef8 <HAL_TIM_Base_Start+0x48>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ee2:	d009      	beq.n	8001ef8 <HAL_TIM_Base_Start+0x48>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <HAL_TIM_Base_Start+0x8c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_TIM_Base_Start+0x48>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a13      	ldr	r2, [pc, #76]	@ (8001f40 <HAL_TIM_Base_Start+0x90>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d111      	bne.n	8001f1c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d010      	beq.n	8001f2c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f1a:	e007      	b.n	8001f2c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	40012c00 	.word	0x40012c00
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40000800 	.word	0x40000800

08001f44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e093      	b.n	8002080 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d106      	bne.n	8001f72 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7fe fcdd 	bl	800092c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f88:	f023 0307 	bic.w	r3, r3, #7
 8001f8c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3304      	adds	r3, #4
 8001f96:	4619      	mov	r1, r3
 8001f98:	4610      	mov	r0, r2
 8001f9a:	f000 f93d 	bl	8002218 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fc6:	f023 0303 	bic.w	r3, r3, #3
 8001fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001fe4:	f023 030c 	bic.w	r3, r3, #12
 8001fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001ff0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	4313      	orrs	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	011a      	lsls	r2, r3, #4
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	031b      	lsls	r3, r3, #12
 8002014:	4313      	orrs	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002022:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	695b      	ldr	r3, [r3, #20]
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4313      	orrs	r3, r2
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_TIM_ConfigClockSource+0x1c>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e0b4      	b.n	800220e <HAL_TIM_ConfigClockSource+0x186>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80020c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80020ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020dc:	d03e      	beq.n	800215c <HAL_TIM_ConfigClockSource+0xd4>
 80020de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020e2:	f200 8087 	bhi.w	80021f4 <HAL_TIM_ConfigClockSource+0x16c>
 80020e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ea:	f000 8086 	beq.w	80021fa <HAL_TIM_ConfigClockSource+0x172>
 80020ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020f2:	d87f      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x16c>
 80020f4:	2b70      	cmp	r3, #112	@ 0x70
 80020f6:	d01a      	beq.n	800212e <HAL_TIM_ConfigClockSource+0xa6>
 80020f8:	2b70      	cmp	r3, #112	@ 0x70
 80020fa:	d87b      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x16c>
 80020fc:	2b60      	cmp	r3, #96	@ 0x60
 80020fe:	d050      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x11a>
 8002100:	2b60      	cmp	r3, #96	@ 0x60
 8002102:	d877      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002104:	2b50      	cmp	r3, #80	@ 0x50
 8002106:	d03c      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0xfa>
 8002108:	2b50      	cmp	r3, #80	@ 0x50
 800210a:	d873      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x16c>
 800210c:	2b40      	cmp	r3, #64	@ 0x40
 800210e:	d058      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x13a>
 8002110:	2b40      	cmp	r3, #64	@ 0x40
 8002112:	d86f      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002114:	2b30      	cmp	r3, #48	@ 0x30
 8002116:	d064      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002118:	2b30      	cmp	r3, #48	@ 0x30
 800211a:	d86b      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x16c>
 800211c:	2b20      	cmp	r3, #32
 800211e:	d060      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002120:	2b20      	cmp	r3, #32
 8002122:	d867      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x16c>
 8002124:	2b00      	cmp	r3, #0
 8002126:	d05c      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x15a>
 8002128:	2b10      	cmp	r3, #16
 800212a:	d05a      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x15a>
 800212c:	e062      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800213e:	f000 f950 	bl	80023e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	609a      	str	r2, [r3, #8]
      break;
 800215a:	e04f      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800216c:	f000 f939 	bl	80023e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800217e:	609a      	str	r2, [r3, #8]
      break;
 8002180:	e03c      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800218e:	461a      	mov	r2, r3
 8002190:	f000 f8b0 	bl	80022f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2150      	movs	r1, #80	@ 0x50
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f907 	bl	80023ae <TIM_ITRx_SetConfig>
      break;
 80021a0:	e02c      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ae:	461a      	mov	r2, r3
 80021b0:	f000 f8ce 	bl	8002350 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2160      	movs	r1, #96	@ 0x60
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f8f7 	bl	80023ae <TIM_ITRx_SetConfig>
      break;
 80021c0:	e01c      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ce:	461a      	mov	r2, r3
 80021d0:	f000 f890 	bl	80022f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2140      	movs	r1, #64	@ 0x40
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f8e7 	bl	80023ae <TIM_ITRx_SetConfig>
      break;
 80021e0:	e00c      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	4610      	mov	r0, r2
 80021ee:	f000 f8de 	bl	80023ae <TIM_ITRx_SetConfig>
      break;
 80021f2:	e003      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      break;
 80021f8:	e000      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a2f      	ldr	r2, [pc, #188]	@ (80022e8 <TIM_Base_SetConfig+0xd0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d00b      	beq.n	8002248 <TIM_Base_SetConfig+0x30>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002236:	d007      	beq.n	8002248 <TIM_Base_SetConfig+0x30>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a2c      	ldr	r2, [pc, #176]	@ (80022ec <TIM_Base_SetConfig+0xd4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <TIM_Base_SetConfig+0x30>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a2b      	ldr	r2, [pc, #172]	@ (80022f0 <TIM_Base_SetConfig+0xd8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d108      	bne.n	800225a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800224e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a22      	ldr	r2, [pc, #136]	@ (80022e8 <TIM_Base_SetConfig+0xd0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00b      	beq.n	800227a <TIM_Base_SetConfig+0x62>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002268:	d007      	beq.n	800227a <TIM_Base_SetConfig+0x62>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1f      	ldr	r2, [pc, #124]	@ (80022ec <TIM_Base_SetConfig+0xd4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d003      	beq.n	800227a <TIM_Base_SetConfig+0x62>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a1e      	ldr	r2, [pc, #120]	@ (80022f0 <TIM_Base_SetConfig+0xd8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a0d      	ldr	r2, [pc, #52]	@ (80022e8 <TIM_Base_SetConfig+0xd0>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d103      	bne.n	80022c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d005      	beq.n	80022de <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f023 0201 	bic.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	611a      	str	r2, [r3, #16]
  }
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40000800 	.word	0x40000800

080022f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	f023 0201 	bic.w	r2, r3, #1
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800231e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f023 030a 	bic.w	r3, r3, #10
 8002330:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	621a      	str	r2, [r3, #32]
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	f023 0210 	bic.w	r2, r3, #16
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800237a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	031b      	lsls	r3, r3, #12
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800238c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	621a      	str	r2, [r3, #32]
}
 80023a4:	bf00      	nop
 80023a6:	371c      	adds	r7, #28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f043 0307 	orr.w	r3, r3, #7
 80023d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	609a      	str	r2, [r3, #8]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr

080023e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b087      	sub	sp, #28
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	60f8      	str	r0, [r7, #12]
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	021a      	lsls	r2, r3, #8
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	431a      	orrs	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	4313      	orrs	r3, r2
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	609a      	str	r2, [r3, #8]
}
 8002416:	bf00      	nop
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002434:	2302      	movs	r3, #2
 8002436:	e046      	b.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800245e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a16      	ldr	r2, [pc, #88]	@ (80024d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00e      	beq.n	800249a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002484:	d009      	beq.n	800249a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a10      	ldr	r2, [pc, #64]	@ (80024d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10c      	bne.n	80024b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40000400 	.word	0x40000400
 80024d8:	40000800 	.word	0x40000800

080024dc <memset>:
 80024dc:	4603      	mov	r3, r0
 80024de:	4402      	add	r2, r0
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d100      	bne.n	80024e6 <memset+0xa>
 80024e4:	4770      	bx	lr
 80024e6:	f803 1b01 	strb.w	r1, [r3], #1
 80024ea:	e7f9      	b.n	80024e0 <memset+0x4>

080024ec <__libc_init_array>:
 80024ec:	b570      	push	{r4, r5, r6, lr}
 80024ee:	2600      	movs	r6, #0
 80024f0:	4d0c      	ldr	r5, [pc, #48]	@ (8002524 <__libc_init_array+0x38>)
 80024f2:	4c0d      	ldr	r4, [pc, #52]	@ (8002528 <__libc_init_array+0x3c>)
 80024f4:	1b64      	subs	r4, r4, r5
 80024f6:	10a4      	asrs	r4, r4, #2
 80024f8:	42a6      	cmp	r6, r4
 80024fa:	d109      	bne.n	8002510 <__libc_init_array+0x24>
 80024fc:	f000 f81a 	bl	8002534 <_init>
 8002500:	2600      	movs	r6, #0
 8002502:	4d0a      	ldr	r5, [pc, #40]	@ (800252c <__libc_init_array+0x40>)
 8002504:	4c0a      	ldr	r4, [pc, #40]	@ (8002530 <__libc_init_array+0x44>)
 8002506:	1b64      	subs	r4, r4, r5
 8002508:	10a4      	asrs	r4, r4, #2
 800250a:	42a6      	cmp	r6, r4
 800250c:	d105      	bne.n	800251a <__libc_init_array+0x2e>
 800250e:	bd70      	pop	{r4, r5, r6, pc}
 8002510:	f855 3b04 	ldr.w	r3, [r5], #4
 8002514:	4798      	blx	r3
 8002516:	3601      	adds	r6, #1
 8002518:	e7ee      	b.n	80024f8 <__libc_init_array+0xc>
 800251a:	f855 3b04 	ldr.w	r3, [r5], #4
 800251e:	4798      	blx	r3
 8002520:	3601      	adds	r6, #1
 8002522:	e7f2      	b.n	800250a <__libc_init_array+0x1e>
 8002524:	08002570 	.word	0x08002570
 8002528:	08002570 	.word	0x08002570
 800252c:	08002570 	.word	0x08002570
 8002530:	08002574 	.word	0x08002574

08002534 <_init>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr

08002540 <_fini>:
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	bf00      	nop
 8002544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002546:	bc08      	pop	{r3}
 8002548:	469e      	mov	lr, r3
 800254a:	4770      	bx	lr
